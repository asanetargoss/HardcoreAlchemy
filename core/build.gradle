buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.5.0'
}
apply plugin: 'net.minecraftforge.gradle.forge'

license {
    include '**/*.java'
    include '**/*_at.cfg'
    matching('**/*.java') {
        header = project.file('../HEADER_lgpl3_upgradeable.txt')
        ext {
            name = 'Hardcore Alchemy Core'
            year = 2022
        }
    }
    matching('**/*_at.cfg') {
        header = project.file('../HEADER_lgpl3_upgradeable.txt')
        style {
            cfg = 'HASH'
        }
        ext {
            name = 'Hardcore Alchemy Core'
            year = 2022
        }
    }
}

// Project settings
archivesBaseName = jarLabel
String coremodPath="targoss.hardcorealchemy.coremod.HardcoreAlchemyCoremod"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so Eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.10.2-12.18.3.2511"
    runDir = "run"
    
    mappings = "stable_29"
    
    replace "@HARDCORE_ALCHEMY_VERSION@", project.version
    replaceIn "HardcoreAlchemy.java"

    // These arguments let us load the coremod properly when testing in a dev environment
    clientJvmArgs = ["-Dfml.coreMods.load=" + coremodPath]
    serverJvmArgs = ["-Dfml.coreMods.load=" + coremodPath]
}

dependencies {
    compileOnly fileTree(dir: "../compilelibs/core", include: "**/*.jar")
}

sourceSets.main.resources.srcDirs += ["../translations/core"]

processResources
{
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // Replace version and mcversion with the settings we've defined for our project
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // Copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Run configs are shared between submods
task setupRunConfig(type: Copy) {
    from "../testconfig"
    into "run/config"
}
setupDecompWorkspace.dependsOn setupRunConfig

jar {
    manifest {
        attributes (
            // Add coremod info to mod jar manifest
            'FMLCorePlugin': coremodPath,
            'FMLCorePluginContainsFMLMod': 'true',
            // Add access transformer info to mod jar manifest
            "FMLAT": 'hardcorealchemy_at.cfg'
        )
    }
}
