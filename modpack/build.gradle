buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id 'org.cadixdev.licenser' version '0.5.0'
}
apply plugin: 'net.minecraftforge.gradle.forge'

license {
    matching('**/*.java') {
        header = project.file('../HEADER_gpl3.txt')
        ext {
            name = 'Hardcore Alchemy Capstone'
            year = 2022
        }
    }
}

// Project settings
archivesBaseName = jarLabel

sourceCompatibility = targetCompatibility = "1.8" // Need this here so Eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.10.2-12.18.3.2511"
    runDir = "run"
    
    mappings = "stable_29"
    
    replace "@HARDCORE_ALCHEMY_MODPACK_VERSION@", project.version
    replaceIn "HardcoreAlchemyModpack.java"
    replace "\"required-before:\" + HardcoreAlchemy.MOD_ID", "\"required-before:\" + HardcoreAlchemy.MOD_ID + \"@[\" + HardcoreAlchemy.VERSION + \",)\""
    replace "\"required-after:\" + HardcoreAlchemyTweaks.MOD_ID", "\"required-after:\" + HardcoreAlchemyTweaks.MOD_ID + \"@[\" + HardcoreAlchemyTweaks.VERSION + \",)\""
    replace "\"required-after:\" + HardcoreAlchemyCreatures.MOD_ID", "\"required-after:\" + HardcoreAlchemyCreatures.MOD_ID + \"@[\" + HardcoreAlchemyCreatures.VERSION + \",)\""
    replace "\"required-after:\" + HardcoreAlchemyMagic.MOD_ID", "\"required-after:\" + HardcoreAlchemyMagic.MOD_ID + \"@[\" + HardcoreAlchemyMagic.VERSION + \",)\""
    replace "\"required-after:\" + HardcoreAlchemySurvival.MOD_ID", "\"required-after:\" + HardcoreAlchemySurvival.MOD_ID + \"@[\" + HardcoreAlchemySurvival.VERSION + \",)\""
    replaceIn "HardcoreAlchemyModpack.java"

    clientJvmArgs += [
        "-Dfml.coreMods.load=" +
        "targoss.hardcorealchemy.coremod.HardcoreAlchemyCoremod," +
        "targoss.hardcorealchemy.tweaks.coremod.HardcoreAlchemyTweaksCoremod," +
        "targoss.hardcorealchemy.creatures.coremod.HardcoreAlchemyCreaturesCoremod," +
        "targoss.hardcorealchemy.magic.coremod.HardcoreAlchemyMagicCoremod," +
        "targoss.hardcorealchemy.survival.coremod.HardcoreAlchemySurvivalCoremod"
    ]
    serverJvmArgs += [
        "-Dfml.coreMods.load=" +
        "targoss.hardcorealchemy.coremod.HardcoreAlchemyCoremod," +
        "targoss.hardcorealchemy.tweaks.coremod.HardcoreAlchemyTweaksCoremod," +
        "targoss.hardcorealchemy.creatures.coremod.HardcoreAlchemyCreaturesCoremod," +
        "targoss.hardcorealchemy.magic.coremod.HardcoreAlchemyMagicCoremod," +
        "targoss.hardcorealchemy.survival.coremod.HardcoreAlchemySurvivalCoremod"
    ]
}

dependencies {
    compileOnly project(":core")
    compileOnly project(":tweaks")
    compileOnly project(":creatures")
    compileOnly project(":magic")
    compileOnly project(":survival")
    compileOnly fileTree(dir: "../compilelibs/core", include: "**/*.jar")
    compileOnly fileTree(dir: "../compilelibs/tweaks", include: "**/*.jar")
    compileOnly fileTree(dir: "../compilelibs/creatures", include: "**/*.jar")
    compileOnly fileTree(dir: "../compilelibs/magic", include: "**/*.jar")
    compileOnly fileTree(dir: "../compilelibs/survival", include: "**/*.jar")
}

sourceSets.main.resources.srcDirs += ["../translations/modpack"]

processResources
{
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // Replace version and mcversion with the settings we've defined for our project
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // Copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Run configs are shared between submods
task setupRunConfig(type: Copy) {
    from "../testconfig"
    into "run/config"
}
setupDecompWorkspace.dependsOn setupRunConfig

// Hack to inherit recompiled Minecraft files with access transformers applied from core, so the decompiled Minecraft jar that this subproject depends on is effectively the same as the one in core.
task setupDecompWorkspace(type: Copy, overwrite: true, dependsOn: project(":core").setupDecompWorkspace) {
    from "../core/.gradle/minecraft/"
    into ".gradle/minecraft/"
    rename { String fileName ->
        fileName.replace("(core)", "(${project.name})")
    }
}
tasks["eclipse"].dependsOn setupDecompWorkspace
// Need to also have an (unused) access transformer file in this project so that the eclipse classpath uses the patched Minecraft jar
task copyAccessTransformerFromCore(type: Copy) {
    from "../core/src/main/resources/META-INF/hardcorealchemy_at.cfg"
    into "src/main/resources/META-INF"
}
setupDecompWorkspace.dependsOn copyAccessTransformerFromCore
processResources.dependsOn copyAccessTransformerFromCore

// Creates a compilelibs archive at modpack/build/distributions, bundling all the different jar dependencies used for development
// NOTE: I have learned that you MUST define project properties referenced by other projects in the referencee's gradle.properties file, not the build.gradle file. If you do not do this, you may run into issues where the project property you are trying to reference is undefined, because that project's build.gradle file has not been fully evaluated yet!
task buildCompileLibs(type: Zip) {
    //archiveName = "hardcorealchemy_modsuite"
    baseName = "hardcorealchemy_compilelibs"
    version = project.version

    from ("../compilelibs")
    into("libs") {
    }
}

// Creates a mod suite archive at modpack/build/distributions, bundling all the different mod jars (except for the modpack jar), for ease of distribution
// NOTE: I have learned that you MUST define project properties referenced by other projects in the referencee's gradle.properties file, not the build.gradle file. If you do not do this, you may run into issues where the project property you are trying to reference is undefined, because that project's build.gradle file has not been fully evaluated yet!
task buildModSuite(type: Zip) {
    dependsOn ":core:build"
    dependsOn ":tweaks:build"
    dependsOn ":creatures:build"
    dependsOn ":magic:build"
    dependsOn ":survival:build"

    //archiveName = "hardcorealchemy_modsuite"
    baseName = "hardcorealchemy_modsuite"
    version = project.version

    from ("../core/build/libs/${project(":core").jarLabel}-${project(":core").version}.jar")
    from ("../tweaks/build/libs/${project(":tweaks").jarLabel}-${project(":tweaks").version}.jar")
    from ("../creatures/build/libs/${project(":creatures").jarLabel}-${project(":creatures").version}.jar")
    from ("../magic/build/libs/${project(":magic").jarLabel}-${project(":magic").version}.jar")
    from ("../survival/build/libs/${project(":survival").jarLabel}-${project(":survival").version}.jar")
    into("libs") {
    }
}
