// Begin Minecraft Forge plugin setup
buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://maven.minecraftforge.net"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
// End Minecraft Forge plugin setup


// Project settings
archivesBaseName = jarLabel
String coremodPath="targoss.hardcorealchemy.tweaks.coremod.HardcoreAlchemyTweaksCoremod"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so Eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.10.2-12.18.3.2511"
    runDir = "run"
    
    mappings = "stable_29"

    replace "@HARDCORE_ALCHEMY_TWEAKS_VERSION@", project.version
    replaceIn "HardcoreAlchemyTweaks.java"

    replace "\"required-before:\" + HardcoreAlchemy.MOD_ID", "\"required-before:\" + HardcoreAlchemy.MOD_ID + \"@[\" + HardcoreAlchemy.VERSION + \"]\""
    replaceIn "HardcoreAlchemyTweaks.java"
    
    clientJvmArgs += ["-Dfml.coreMods.load=targoss.hardcorealchemy.coremod.HardcoreAlchemyCoremod,${coremodPath}"]
    serverJvmArgs += ["-Dfml.coreMods.load=targoss.hardcorealchemy.coremod.HardcoreAlchemyCoremod,${coremodPath}"]
}

dependencies {
    compileOnly project(":core")
    compileOnly fileTree(dir: "../compilelibs/core", include: "**/*.jar")
}

sourceSets.main.resources.srcDirs += ["../translations/tweaks"]

processResources
{
    // This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // Replace version and mcversion with the settings we've defined for our project
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // Copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Hack to inherit recompiled Minecraft files with access transformers applied from core, so the decompiled Minecraft jar that this subproject depends on is effectively the same as the one in core.
task setupDecompWorkspace(type: Copy, overwrite: true, dependsOn: project(":core").setupDecompWorkspace) {
    from "../core/.gradle/minecraft/"
    into ".gradle/minecraft/"
    rename { String fileName ->
        fileName.replace("(core)", "(${project.name})")
    }
}
tasks["eclipse"].dependsOn setupDecompWorkspace
// Need to also have an (unused) access transformer file in this project so that the eclipse classpath uses the patched Minecraft jar
task copyAccessTransformerFromCore(type: Copy) {
    from "../core/src/main/resources/META-INF/hardcorealchemy_at.cfg"
    into "src/main/resources/META-INF"
}
setupDecompWorkspace.dependsOn copyAccessTransformerFromCore
processResources.dependsOn copyAccessTransformerFromCore

// Run configs are shared between submods
task setupRunConfig(type: Copy) {
    from "../testconfig"
    into "run/config"
}
setupDecompWorkspace.dependsOn setupRunConfig

jar {
    manifest {
        attributes (
            // Add coremod info to mod jar manifest
            'FMLCorePlugin': coremodPath,
            'FMLCorePluginContainsFMLMod': 'true',
            // Add access transformer info to mod jar manifest
            "FMLAT": 'hardcorealchemy_at.cfg'
        )
    }
}
